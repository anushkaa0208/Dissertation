library(moments)

##########
#Estimation of pi

set.seed(12345)
D=5;L=2.5
k=0;n=5000
for(j in 1:n)
{
  X=runif(1,0,D/2)
  theta=runif(1,0,pi/2)
  if((L/2)*sin(theta)>=X)
  {
  k=k+1
  }
}
emp_prob = k/n
est_pi = (2*L)/(D*emp_prob) #Estimation of pi

##########
#Point Estimation

est_pi=array(0)
for (i in 1:1000)
{
  D=5;L=2.5
  k=0;n=5000
  for(j in 1:n)
  {
    X=runif(1,0,D/2)
    theta=runif(1,0,pi/2)
    if((L/2)*sin(theta)>=X)
    {
      k=k+1
    }
  }
  emp_prob = k/n
  est_pi[i] = (2*L)/(D*emp_prob)
}
est_pi #Array of 1000 estimates of pi

#Scatterplot
plot(est_pi,col='steelblue',ylab='Estimated Values of pi')
x=seq(-100,1100,1)
y=x*0+3.1415
lines(x,y,lwd=2)

#Bias
bias_p=mean(est_pi-3.14159)

#Mean
mean_pi=mean(est_pi)

#MSE
MSE_pi=mean((est_pi-3.14159)^2)

#Variance
Var_pi=mean((est_pi-mean(est_pi))^2)

#SD
SD_pi=sqrt(mean((est_pi-mean(est_pi))^2))

#CV
CV_pi=mean_pi/SD_pi

##########
#Tests for Normality

#skewness and kurtosis
skewness(est_pi)
kurtosis(est_pi)

#Histogram
hi=hist(est_pi,freq=FALSE,xlim=c(2.8,3.5),ylim=c(0,6),ylab='Freqency Density',xlab='Estimated values',col='palevioletred1')
x = seq(min(est_pi)-0.05, max(est_pi)+0.05, length =500)
y = dnorm(x, mean_pi, SD_pi) 
lines(x, y, lwd = 2,col='blue4')

#Boxplot
boxplot(est_pi,col='darkolivegreen1')

#Normal Probability Plot
qqnorm(est_pi, pch = 1, frame = FALSE)
qqline(est_pi, col = "steelblue", lwd = 2)

##########
#Interval Estimation and Coverage Proability

#Confidence Interval

lower_bound=mean_pi-sqrt(SD_pi/1000)*qnorm(0.975)
upper_bound=mean_pi+sqrt(SD_pi/1000)*qnorm(0.975)

#Coverage Probability

set.seed(12345)
for (i in 1:25000)
{
  D=5;L=2.5
  k=0;n=5000
  for(j in 1:n)
  {
    X=runif(1,0,D/2)
    theta=runif(1,0,pi/2)
    if((L/2)*sin(theta)>=X)
    {
      k=k+1
    }
  }
  emp_prob = k/n
  est_pi_1[i] = (2*L)/(D*emp_prob)
}

num_arrays = 50
sample_size = 500
confidence_level = 0.95
true_mean = 3.1415  # True value of pi

data_arrays=matrix(est_pi_1,nrow=50,byrow=T)


calculate_ci_normal = function(data, confidence_level) 
{
  mean_val = mean(data)
  std_dev = sd(data)
  margin_of_error = qnorm((1 + confidence_level) / 2) * std_dev / sqrt(length(data))
  lower_bound = mean_val - margin_of_error
  upper_bound = mean_val + margin_of_error
  return(c(lower_bound, upper_bound))
}

# Calculate confidence intervals and check if true mean is within each interval

contain_true_mean = numeric(num_arrays)

for (i in 1:num_arrays) 
{
  ci = calculate_ci_normal(data_arrays[i,], confidence_level)
  contain_true_mean[i] = (true_mean >= ci[1] && true_mean <= ci[2])
}
mean(contain_true_mean)
